version: '3.8'

# Logging configuration (reusable)
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: nieuws-scraper-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-scraper}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-scraper_password}
      POSTGRES_DB: ${POSTGRES_DB:-nieuws_scraper}
      # Performance tuning
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_MAX_CONNECTIONS: 100
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-scraper} -d ${POSTGRES_DB:-nieuws_scraper}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - nieuws-scraper-network
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: nieuws-scraper-redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-redis_password}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-backlog 511
      --timeout 300
      --tcp-keepalive 60
      --loglevel notice
      --databases 16
      --lazyfree-lazy-eviction yes
      --lazyfree-lazy-expire yes
      --lazyfree-lazy-server-del yes
      --replica-lazy-flush yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD:-redis_password}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - nieuws-scraper-network
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Go Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nieuws-scraper-app
    restart: always
    ports:
      - "${API_PORT:-8080}:8080"
    environment:
      - API_PORT=8080
      - ENV=${ENV:-docker}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-scraper}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-scraper_password}
      - POSTGRES_DB=${POSTGRES_DB:-nieuws_scraper}
      - POSTGRES_SSL_MODE=disable
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
      - REDIS_DB=${REDIS_DB:-0}
      - REDIS_POOL_SIZE=${REDIS_POOL_SIZE:-20}
      - REDIS_MIN_IDLE_CONNS=${REDIS_MIN_IDLE_CONNS:-5}
      - CACHE_DEFAULT_TTL_MINUTES=${CACHE_DEFAULT_TTL_MINUTES:-5}
      - CACHE_COMPRESSION_THRESHOLD=${CACHE_COMPRESSION_THRESHOLD:-1024}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      # AI Configuration
      - AI_ENABLED=${AI_ENABLED:-false}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      # Stock Configuration
      - STOCK_API_PROVIDER=${STOCK_API_PROVIDER:-fmp}
      - STOCK_API_KEY=${STOCK_API_KEY:-}
      # Email Configuration
      - EMAIL_ENABLED=${EMAIL_ENABLED:-false}
      - EMAIL_HOST=${EMAIL_HOST:-}
      - EMAIL_PORT=${EMAIL_PORT:-993}
      - EMAIL_USERNAME=${EMAIL_USERNAME:-}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD:-}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - nieuws-scraper-network
    volumes:
      - ./.env:/root/.env:ro
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # PostgreSQL Backup Service (runs daily)
  backup:
    image: postgres:15-alpine
    container_name: nieuws-scraper-backup
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-scraper}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-scraper_password}
      POSTGRES_DB: ${POSTGRES_DB:-nieuws_scraper}
      PGHOST: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data:ro
      - ./backups:/backups
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - nieuws-scraper-network
    logging: *default-logging
    command: >
      sh -c '
        while true; do
          echo "Starting backup at $$(date)"
          pg_dump -U ${POSTGRES_USER:-scraper} -h postgres ${POSTGRES_DB:-nieuws_scraper} > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
          echo "Backup completed at $$(date)"
          echo "Cleaning old backups (keeping last 7 days)..."
          find /backups -name "backup_*.sql" -type f -mtime +7 -delete
          echo "Sleeping for 24 hours..."
          sleep 86400
        done
      '
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  nieuws-scraper-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16